#!/bin/bash
# Wrapper script to determine which VM driver is appropriate for the staging
# environment, given the host OS and available tooling. Supports:
#
#   * VirtualBox (the default)
#   * Libvirt/KVM
#   * Qubes (via Admin API)
#
# Set the VAGRANT_DEFAULT_PROVIDER env var to override autodetection.

set -e
set -u
set -o pipefail

# Support optional Xenial scenarios, for evaluating Xenial support
# as we approach the LTS expiration for Trusty.

if [[ "${1:-}" = "xenial" ]] ; then
    securedrop_platform_suffix="-xenial"
else
    securedrop_platform_suffix=""
fi

# Respect explicit choice of Vagrant provider if set.
if [[ -n "${VAGRANT_DEFAULT_PROVIDER:-}" ]] ; then
    securedrop_vm_provider="${VAGRANT_DEFAULT_PROVIDER}"
# Check whether it appears we're running in Qubes, in which case the standard Vagrant
# logic will not work at all, due to lack of nested virt support.
elif printenv | grep -q ^QUBES_ ; then
    securedrop_vm_provider="qubes"
elif [[ "${OSTYPE:-}" == "linux-gnu" ]]; then
    # Default to Libvirt for Linux users, which works well with Tails VM virtualization.
    securedrop_vm_provider="libvirt"
else
    # Default to VirtualBox, since it's the safest bet.
    securedrop_vm_provider="virtualbox"
fi

# Expect the scenario to reside in the molecule/ directory.
securedrop_staging_scenario="${securedrop_vm_provider}-staging${securedrop_platform_suffix}"

# Check whether identified scenario actually exists
if [[ ! -d "molecule/${securedrop_staging_scenario}" ]] ; then
    printf "Scenario '%s' not found\n" "${securedrop_staging_scenario}"
    printf "Export VAGRANT_DEFAULT_PROVIDER with a supported scenario.\n"
    exit 1
else
    printf "Creating staging environment via '%s'...\n" "${securedrop_staging_scenario}"
fi

# Run it!
molecule converge -s "${securedrop_staging_scenario}"
